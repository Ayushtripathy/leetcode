/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    static class pair{
        int h;
        TreeNode node;
        pair(int y, TreeNode temp){
            h = y;
            node = temp;
        }
    }
    
    static void reverse(List<List<Integer>> ans){
        int l = 0, r = ans.size() - 1;
        while (l < r) {
            List<Integer> t = ans.get(l);
            ans.set(l, ans.get(r));
            ans.set(r, t);
            l++;
            r--;
        }
    }
    
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        if(root == null) return new ArrayList<>();
        
        Queue<pair> q = new LinkedList<>();
        q.add(new pair(0, root));
        List<List<Integer>> ans = new ArrayList<>();
        int curr = -1;
        
        while(q.size() > 0) {
            pair temp = q.remove();
            if(temp.h != curr) {
                curr = temp.h;
                ans.add(new ArrayList<>());
            }
            ans.get(temp.h).add(temp.node.val);
            if(temp.node.left != null) q.add(new pair(temp.h + 1, temp.node.left));
            if(temp.node.right != null) q.add(new pair(temp.h + 1, temp.node.right));
        }
        
        reverse(ans);
        
        return ans;
    }
}
