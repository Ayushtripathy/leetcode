/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        if(root == null) return 0;
        Deque<TreeNode> dq = new LinkedList<>();
        int ans = 0;
        dq.add(root);
        
        while (dq.size() > 0) {
            int size = dq.size();
            ans = Math.max(ans, size);
            
            while(size -- > 0) {
                TreeNode curr = dq.poll();
                
                if(curr == null) {
                    dq.add(null);
                    dq.add(null);
                } else {
                    dq.add(curr.left);
                    dq.add(curr.right);
                }
            }
            
            while(dq.size() > 0 && dq.peekFirst() == null) {
                dq.pollFirst();
            }
            
            while(dq.size() > 0 && dq.peekLast() == null) {
                dq.pollLast();
            } 
            
        }
        return ans;
        
    }
}
