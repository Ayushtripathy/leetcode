class Solution {
    
    private static boolean sol(int cr, int cc, char[][] board, String word, int count) {
        if (word.length() == count) return true;
        if (board[cr][cc] != word.charAt(count)) return false;
        count++;
        if (word.length() == count) return true;
        char ch = board[cr][cc];
        board[cr][cc] = '.';
        
        if (cr + 1 < board.length && board[cr+1][cc]!='.' && sol(cr+1, cc, board, word, count)) 
            return true;
        if (cr - 1 >= 0 && board[cr - 1][cc] != '.' && sol(cr - 1, cc, board, word, count)) 
            return true;
        if(cc+1 < board[0].length && board[cr][cc+1]!='.' && sol(cr, cc+1, board, word,  count)) 
            return true;
        if (cc - 1 >= 0 && board[cr][cc - 1] != '.' && sol(cr, cc - 1, board, word,  count)) 
            return true;
        board[cr][cc] = ch;
        return false;
    }
    
    public boolean exist(char[][] board, String word) {
        
        for(int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if(board[i][j] == word.charAt(0) && sol(i , j, board, word, 0)) return true;
            }
        }
        
        return false;
    }
}
