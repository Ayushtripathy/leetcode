class Solution {
    public int largestRectangleArea(int[] heights) {
        int n = heights.length;
        int[] nser = new int[n];
        int[] nsel = new int[n];
        Stack<Integer> s = new Stack<>();
        
        for (int i = 0; i < n; i++) {
            while(s.size() > 0 && heights[s.peek()] >= heights[i]) {
                s.pop();
            }
            
            if(s.size() == 0) {
                nsel[i] = -1;
            } else nsel[i] = s.peek();
            
            s.push(i);
        }
        
        while(s.size() > 0) {
            s.pop();
        }
        
        for (int i = n - 1; i >= 0; i--) {
            while(s.size() > 0 && heights[s.peek()] >= heights[i]) {
                s.pop();
            }
            
            if(s.size() == 0) {
                nser[i] = n;
            } else nser[i] = s.peek();
            
            s.push(i);
        }
        
        int ans = 0;
        for(int i = 0; i < n; i++) {
            int area = (nser[i] - nsel[i] - 1) * heights[i];
            ans = Math.max(ans, area);
        }
        return ans;
    }
}
