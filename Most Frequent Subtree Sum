/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    private static int solve(TreeNode root, HashMap<Integer, Integer> hm) {
        if(root.left == null && root.right == null) {
            if(hm.containsKey(root.val)) hm.put(root.val, hm.get(root.val) + 1);
            else hm.put(root.val, 1);
            return root.val;
        }
        
        int ans = 0;
        if(root.left != null) ans += solve(root.left, hm);
        if(root.right != null) ans += solve(root.right, hm);
        
        ans += root.val;
        
        if(hm.containsKey(ans)) hm.put(ans, hm.get(ans) + 1);
        else hm.put(ans, 1);
        return ans;
    }
    
    public int[] findFrequentTreeSum(TreeNode root) {
        if(root == null) return new int[0];
        
        HashMap<Integer, Integer> hm = new HashMap<>();
        
        solve(root, hm);
        int max = Integer.MIN_VALUE, count = 0;
        for (Integer i : hm.keySet()){
            // System.out.println(max + " " + i + " " + count);
            if(hm.get(i) > max) {
                max = hm.get(i);
                count = 1;
            } else if(hm.get(i) == max) count++;
            // System.out.println(max + " " + i + " " + count);
        } 
        
        // System.out.println(max + " " + count);
        
        int[] ans = new int[count];
        int k = 0;
        for(Integer i : hm.keySet()) {
            // System.out.println(max + " " + i + " " + k);
            if(hm.get(i) == max) {
                ans[k] = i;
                k++;
            } 
        }
        return ans;
    }
}
