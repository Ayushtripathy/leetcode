class Solution {
    private static boolean isvalid(char[][] board, int cr, int cc) {
        //left
        for(int i = cc; i < board[0].length; i++) {
            if(board[cr][i] == 'Q') return false;
        }
        
        //rigth
        for(int i = cc; i >= 0; i--) {
            if(board[cr][i] == 'Q') return false;
        }
        
        //up
        for(int i = cr; i >= 0; i--) {
            if(board[i][cc] == 'Q') return false;
        }
        
        //down
        for(int i = cr; i < board.length; i++) {
            if(board[i][cc] == 'Q') return false;
        }
        
        //upper diagonal left
        for(int i = cr, j = cc; i >= 0 && j < board[0].length; i--, j++) {
            if(board[i][j] == 'Q') return false;
        }
        
        //upper diagonal right
        for(int i = cr, j = cc; i >= 0 && j >= 0; i--, j--) {
            if(board[i][j] == 'Q') return false;
        }
        
        //lower left diagonal
        for(int i = cr, j = cc; i < board.length && j < board[0].length; i++, j++) {
            if(board[i][j] == 'Q') return false;
        }
        
        //lower rigth diagonal
        for(int i = cr, j = cc; i < board.length && j >= 0; i++, j--) {
            if(board[i][j] == 'Q') return false;
        }
        return true;
    }
    
    private static boolean check(char[][] board){
        for(int i = 0; i < board.length; i++){
            boolean temp = false;
            for(int j = 0; j < board[0].length; j++) {
                if(board[i][j] == 'Q') {
                    temp = true;
                    break;
                }
            }
            if(!temp) return false;
        }
        return true;
    }
    
    private static List<String> convert(char[][] board){
        List<String> ans = new ArrayList<>(); 
        for (int i = 0; i <board.length; i++){
            String temp = "";
            for(int j = 0; j < board[0].length; j++){
                temp += board[i][j];
            }
            ans.add(temp);
        }
        return ans;
    }
    private static void solve(List<List<String>> ans, char[][] board, int cr, Set<List<String>> hs) {
        if(check(board)){
            List<String> temp = convert(board);
            if(!hs.contains(temp)) {
                ans.add(temp);
                hs.add(temp);
            }
            return;
        }
        
        if(cr == board.length) return;
        
        for(int i = 0; i < board[0].length; i++) {
            if(isvalid(board, cr, i)) {
                board[cr][i]  = 'Q';
                solve(ans, board, cr + 1, hs);
                board[cr][i] = '.';
            }
        }
    }
    
    public int solveNQueens(int n) {
        List<List<String>> ans = new ArrayList<>();
        char[][] board = new char[n][n];
        Set<List<String>> hs = new HashSet<>();
        // Arrays.fill(board, '.');
        for(int i = 0; i < n; i++) 
            for(int j = 0; j < n; j++)
                board[i][j] = '.';
        solve(ans, board, 0, hs);
        return ans.size();
    }
    
    public int totalNQueens(int n) {
        return solveNQueens(n);
    }
}
