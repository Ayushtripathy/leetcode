class Solution {
    // private static boolean check(String str){
    //     Stack<Character> s = new Stack<>();
    //     int i = 0;
    //     while(i < str.length()){
    //         if(str.charAt(i) =='(') s.push('(');
    //         else {
    //             if(s.size() > 0 && s.peek() == '(') s.pop();
    //             else return false;
    //         }
    //         i++;
    //     }
    //     if(s.size() > 0) return false;
    //     return true;
    // }
    
    private static void solve(List<String> ans, String temp, int sc, int ec, int n){
        if(temp.length() == 2 * n){
            // if(check(temp)) 
            ans.add(temp);
            return;
        }
        if(sc < n) solve(ans, temp + '(', sc + 1, ec, n);
        if(ec < sc) solve(ans, temp + ')', sc, ec + 1, n);
    }
    
    public List<String> generateParenthesis(int n) {
        List<String> ans = new ArrayList<>();
        String temp = "";
        solve(ans, temp, 0 , 0, n);
        return ans;
    }
}
