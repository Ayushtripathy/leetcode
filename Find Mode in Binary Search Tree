/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    private static void solve(TreeNode root, HashMap<Integer, Integer> hm) {
        if(root == null) return;
        
        int val = 1;
        if(hm.containsKey(root.val)) val += hm.get(root.val);
        
        hm.put(root.val, val);
        if(root.left != null) solve(root.left, hm);
        if(root.right != null) solve(root.right, hm);
        
    }
    
    public int[] findMode(TreeNode root) {
        if(root == null) return new int[0];
        
        int max = Integer.MIN_VALUE, count = 0;
        HashMap<Integer, Integer> hm = new HashMap<>();
        solve(root, hm);
        for(int ele : hm.keySet()){
            // System.out.println(ele + " " + hm.get(ele));
            if(hm.get(ele) > max) {
                max = hm.get(ele);
                count = 1;
            } else if(hm.get(ele) == max) {
                count++;
            }
        }
        
        int[] ans = new int[count];
        int k = 0;
        for(int ele : hm.keySet()) {
            if(hm.get(ele) == max) {
                ans[k] = ele;
                k++;
            }
        }
        return ans;
    }
}
