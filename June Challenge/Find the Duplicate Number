class Solution {
    public int findDuplicate(int[] nums) {
//         Arrays.sort(nums);
        
//         for(int i=1; i<nums.length; i++){
//             if( nums[i]== nums[i-1] ) return nums[i];
//         }
        
//         return 0;
        
        
        int n= nums.length-1;
        int sqrt =(int) (Math.ceil(Math.sqrt(n)));
        
        int[] range= new int[sqrt];
        
        for(int i=0; i<nums.length; i++){
            int curr= (int) (Math.ceil( (1.0*nums[i])/sqrt) -1);
            range[curr]++;
        }
        
        int suspect=-1;
        for(int i=0; i<range.length; i++)
            if(range[i]>sqrt){
                suspect= i;
                break;
            }
        
        if(suspect==-1) return -1;
        
        Set<Integer> ele = new HashSet<>();
        for(int i=0; i<nums.length; i++){
            int curr=(int) (Math.ceil( (1.0*nums[i])/sqrt) -1);
            if(curr== suspect){
                if(ele.contains(nums[i]))
                    return nums[i];
                else ele.add(nums[i]);
            }
        }
        
        return -1;
    }
}
