/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
    private static void recursive(Node root, List<Integer> ans) {
        ans.add(root.val);
        for (int i = 0;  i < root.children.size(); i++) {
            recursive(root.children.get(i), ans);
        }
    }
    
    private static void iterative(Node root, List<Integer> ans) {
        Stack<Node> s = new Stack<>();
        
        s.push(root);
        while (s.size() > 0) {
            Node curr = s.pop();
            ans.add(curr.val);
            for (int i = curr.children.size() - 1; i >= 0; i--) {
                s.push(curr.children.get(i));
            }
        }
    }
    
    public List<Integer> preorder(Node root) {
        List<Integer> ans = new ArrayList<>();
        if(root == null) return ans;
        // recursive(root, ans);
        iterative(root, ans);
        return ans;
    }
}
