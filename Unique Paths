class Solution {
    
    private static int count(int m , int n, int cr, int cc) {
        if (cr == m && cc == n) {
            return 1;
        }
        int ans = 0;
        if (cr + 1 <= m) ans += count(m , n, cr + 1, cc);
        if (cc + 1 <= n) ans += count(m , n, cr, cc + 1);
        return ans;
    }
    
    public int uniquePaths(int m, int n) {
        // return count(m, n, 1, 1);
        int[][] dp = new int[n][m];
        
        for (int i = n-1; i >= 0; i--) {
            for (int j = m-1; j >= 0; j--) {
                if (i == n - 1 || j == m - 1) dp[i][j] = 1;
                else dp[i][j] = dp[i + 1][j] + dp[i][j + 1];
            }
        }
        return dp[0][0];
    }
}
