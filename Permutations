class Solution {
    public List<List<Integer>> permute(int[] nums) {
        
        List<List<Integer>> fans= new ArrayList<>();
        List<Integer> pans= new ArrayList<Integer>();
        boolean[] visited=  new boolean[nums.length];
        
        return sol(fans,pans , nums,visited);
    }
    
    static List<List<Integer>> sol(List<List<Integer>> fans, List<Integer> pans, 
                                  int[] nums, boolean[] visited){
        
        if(pans.size()== nums.length){
            fans.add(new ArrayList<Integer>(pans));
            return fans;
        }
        
        for(int i=0; i<nums.length; i++){
            if(!visited[i]){
                visited[i]= true;
                pans.add(nums[i]);
                sol(fans, pans, nums, visited);
                
                pans.remove(pans.size()-1);
                visited[i]= false;
            }
        }
        return fans;
    }
    
}
