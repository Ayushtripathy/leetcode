/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    public static int depth(TreeNode root , int x){
        if(root==null) return -1;
        if(root.val==x) return 0;
        
        if(root.left!=null){
            int t= depth(root.left,x);
            if(t>=0) return 1+t;
        }
        if(root.right!=null){
            int t= depth(root.right,x);
            if(t>=0) return t+1;
        }
        
        return -1;
    }
    
    public static boolean sol(TreeNode root, int x, int y){
        if(root.left!=null && root.right!=null){
            if(root.left.val ==x && root.right.val == y) return false;
            if(root.left.val ==y && root.right.val == x) return false;
        }
        boolean ans;
        if(root.left!=null) {
            ans= sol(root.left, x, y);
            if(ans==false) return ans; 
        }
        if(root.right!=null) {
            ans=sol(root.right, x, y);
            if(ans==false) return ans;
        }
        return true;
    }
     
    public boolean isCousins(TreeNode root, int x, int y) {
        int d_x = depth(root, x) , d_y= depth(root,y);
        // System.out.println(d_x + " " + d_y);
        
        if(d_x!=d_y) return false;
        
        return sol(root, x, y);
        
    }
}
